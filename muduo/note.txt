TCP网络编程本质论
基于事件的非阻塞网络编程是编写高性能并发网络服务程序的主流模式。
把原来的 1.主动调用recv()来接受数据 2.主动调用accept()来接受新连接 3.主动调用send()来发送数据  改为  1.注册一个收数据的回调，网络收到数据会回调我，直接把数据提供给我供我消费。2.注册一个接受连接的回调，网络库接受了新连接会回调我，直接把新的连接对象传给我，供我使用。3.需要发送连接的时候，只管往连接里写，网络库负责无阻塞发送。

TCP网络编程最本质的是处理三个半事情：
1.连接的建立，包括服务器接受新连接和客户发起连接。一旦连接建立，服务器和客户端是平等的，可以各自收发数据。
2.连接的断开，包括主动断开和被动断开。
3.1.消息到达，文件描述符可读。这是最为重要的一个事件，对它的处理方式决定了网络编程的风格(阻塞还是非阻塞，如何处理分包，应用层的缓冲如何设计等)。
3.2.消息发送完毕，这算半个。对于低流量的服务，可以不必关心这个事件。这里的发送完毕，指的是“将数据写入操作系统的缓冲区，将由TCP协议栈负责数据的发送和重传，不代表对方已经收到数据”。



